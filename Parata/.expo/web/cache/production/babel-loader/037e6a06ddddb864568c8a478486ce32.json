{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";import React from'react';import PropTypes from'prop-types';import Animated from\"react-native-web/dist/exports/Animated\";import Text from\"react-native-web/dist/exports/Text\";import TextInput from\"react-native-web/dist/exports/TextInput\";import TouchableWithoutFeedback from\"react-native-web/dist/exports/TouchableWithoutFeedback\";import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import BaseInput from\"./BaseInput\";var Hoshi=function(_BaseInput){_inherits(Hoshi,_BaseInput);function Hoshi(){_classCallCheck(this,Hoshi);return _possibleConstructorReturn(this,_getPrototypeOf(Hoshi).apply(this,arguments));}_createClass(Hoshi,[{key:\"render\",value:function render(){var _this$props=this.props,label=_this$props.label,containerStyle=_this$props.style,inputStyle=_this$props.inputStyle,labelStyle=_this$props.labelStyle,maskColor=_this$props.maskColor,borderColor=_this$props.borderColor,borderHeight=_this$props.borderHeight,inputPadding=_this$props.inputPadding,inputHeight=_this$props.height;var _this$state=this.state,width=_this$state.width,focusedAnim=_this$state.focusedAnim,value=_this$state.value;var flatStyles=StyleSheet.flatten(containerStyle)||{};var containerWidth=flatStyles.width||width;return React.createElement(View,{style:[styles.container,containerStyle,{height:inputHeight+inputPadding,width:containerWidth}],onLayout:this._onLayout},React.createElement(TextInput,_extends({ref:this.input},this.props,{style:[styles.textInput,inputStyle,{width:width,height:inputHeight,left:inputPadding}],value:value,onBlur:this._onBlur,onChange:this._onChange,onFocus:this._onFocus,underlineColorAndroid:'transparent'})),React.createElement(TouchableWithoutFeedback,{onPress:this.focus},React.createElement(Animated.View,{style:[styles.labelContainer,{opacity:focusedAnim.interpolate({inputRange:[0,0.5,1],outputRange:[1,0,1]}),top:focusedAnim.interpolate({inputRange:[0,0.5,0.51,1],outputRange:[24,24,0,0]}),left:focusedAnim.interpolate({inputRange:[0,0.5,0.51,1],outputRange:[inputPadding,2*inputPadding,0,inputPadding]})}]},React.createElement(Text,{style:[styles.label,labelStyle]},label))),React.createElement(View,{style:[styles.labelMask,{backgroundColor:maskColor,width:inputPadding}]}),React.createElement(Animated.View,{style:[styles.border,{width:focusedAnim.interpolate({inputRange:[0,1],outputRange:[0,width]}),backgroundColor:borderColor,height:borderHeight}]}));}}]);return Hoshi;}(BaseInput);Hoshi.propTypes={borderColor:PropTypes.string,maskColor:PropTypes.string,inputPadding:PropTypes.number,height:PropTypes.number};Hoshi.defaultProps={borderColor:'red',inputPadding:16,height:48,borderHeight:3};export{Hoshi as default};var styles=StyleSheet.create({container:{borderBottomWidth:2,borderBottomColor:'#b9c1ca'},labelContainer:{position:'absolute'},label:{fontSize:16,color:'#6a7989'},textInput:{position:'absolute',bottom:2,padding:0,color:'#6a7989',fontSize:18,fontWeight:'bold'},labelMask:{height:24},border:{position:'absolute',bottom:0,left:0,right:0}});","map":{"version":3,"sources":["/Users/alice/Desktop/parata-app/Parata/node_modules/react-native-textinput-effects/lib/Hoshi.js"],"names":["React","PropTypes","BaseInput","Hoshi","props","label","containerStyle","style","inputStyle","labelStyle","maskColor","borderColor","borderHeight","inputPadding","inputHeight","height","state","width","focusedAnim","value","flatStyles","StyleSheet","flatten","containerWidth","styles","container","_onLayout","input","textInput","left","_onBlur","_onChange","_onFocus","focus","labelContainer","opacity","interpolate","inputRange","outputRange","top","labelMask","backgroundColor","border","propTypes","string","number","defaultProps","create","borderBottomWidth","borderBottomColor","position","fontSize","color","bottom","padding","fontWeight","right"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Animated,\n  Text,\n  TextInput,\n  TouchableWithoutFeedback,\n  View,\n  StyleSheet,\n} from 'react-native';\n\nimport BaseInput from './BaseInput';\n\nexport default class Hoshi extends BaseInput {\n  static propTypes = {\n    borderColor: PropTypes.string,\n    /*\n     * this is used to set backgroundColor of label mask.\n     * this should be replaced if we can find a better way to mask label animation.\n     */\n    maskColor: PropTypes.string,\n    inputPadding: PropTypes.number,\n    height: PropTypes.number,\n  };\n\n  static defaultProps = {\n    borderColor: 'red',\n    inputPadding: 16,\n    height: 48,\n    borderHeight: 3,\n  };\n\n  render() {\n    const {\n      label,\n      style: containerStyle,\n      inputStyle,\n      labelStyle,\n      maskColor,\n      borderColor,\n      borderHeight,\n      inputPadding,\n      height: inputHeight,\n    } = this.props;\n    const { width, focusedAnim, value } = this.state;\n    const flatStyles = StyleSheet.flatten(containerStyle) || {};\n    const containerWidth = flatStyles.width || width;\n\n    return (\n      <View\n        style={[\n          styles.container,\n          containerStyle,\n          {\n            height: inputHeight + inputPadding,\n            width: containerWidth,\n          },\n        ]}\n        onLayout={this._onLayout}\n      >\n        <TextInput\n          ref={this.input}\n          {...this.props}\n          style={[\n            styles.textInput,\n            inputStyle,\n            {\n              width,\n              height: inputHeight,\n              left: inputPadding,\n            },\n          ]}\n          value={value}\n          onBlur={this._onBlur}\n          onChange={this._onChange}\n          onFocus={this._onFocus}\n          underlineColorAndroid={'transparent'}\n        />\n        <TouchableWithoutFeedback onPress={this.focus}>\n          <Animated.View\n            style={[\n              styles.labelContainer,\n              {\n                opacity: focusedAnim.interpolate({\n                  inputRange: [0, 0.5, 1],\n                  outputRange: [1, 0, 1],\n                }),\n                top: focusedAnim.interpolate({\n                  inputRange: [0, 0.5, 0.51, 1],\n                  outputRange: [24, 24, 0, 0],\n                }),\n                left: focusedAnim.interpolate({\n                  inputRange: [0, 0.5, 0.51, 1],\n                  outputRange: [inputPadding, 2 * inputPadding, 0, inputPadding],\n                }),\n              },\n            ]}\n          >\n            <Text style={[styles.label, labelStyle]}>\n              {label}\n            </Text>\n          </Animated.View>\n        </TouchableWithoutFeedback>\n        <View\n          style={[styles.labelMask, {\n            backgroundColor: maskColor,\n            width: inputPadding,\n          }]}\n        />\n        <Animated.View\n          style={[\n            styles.border,\n            {\n              width: focusedAnim.interpolate({\n                inputRange: [0, 1],\n                outputRange: [0, width],\n              }),\n              backgroundColor: borderColor,\n              height: borderHeight,\n            },\n          ]}\n        />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderBottomWidth: 2,\n    borderBottomColor: '#b9c1ca',\n  },\n  labelContainer: {\n    position: 'absolute',\n  },\n  label: {\n    fontSize: 16,\n    color: '#6a7989',\n  },\n  textInput: {\n    position: 'absolute',\n    bottom: 2,\n    padding: 0,\n    color: '#6a7989',\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n  labelMask: {\n    height: 24,\n  },\n  border: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}