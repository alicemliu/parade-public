{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";import React from'react';import PropTypes from'prop-types';import Animated from\"react-native-web/dist/exports/Animated\";import Easing from\"react-native-web/dist/exports/Easing\";import Text from\"react-native-web/dist/exports/Text\";import TextInput from\"react-native-web/dist/exports/TextInput\";import TouchableWithoutFeedback from\"react-native-web/dist/exports/TouchableWithoutFeedback\";import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import BaseInput from\"./BaseInput\";var Makiko=function(_BaseInput){_inherits(Makiko,_BaseInput);function Makiko(){_classCallCheck(this,Makiko);return _possibleConstructorReturn(this,_getPrototypeOf(Makiko).apply(this,arguments));}_createClass(Makiko,[{key:\"render\",value:function render(){var _this$props=this.props,iconClass=_this$props.iconClass,iconColor=_this$props.iconColor,iconName=_this$props.iconName,iconSize=_this$props.iconSize,iconWidth=_this$props.iconWidth,containerStyle=_this$props.style,inputHeight=_this$props.height,inputPadding=_this$props.inputPadding,inputStyle=_this$props.inputStyle,label=_this$props.label,labelStyle=_this$props.labelStyle;var _this$state=this.state,width=_this$state.width,focusedAnim=_this$state.focusedAnim,value=_this$state.value;var AnimatedIcon=Animated.createAnimatedComponent(iconClass);return React.createElement(View,{style:[styles.container,containerStyle],onLayout:this._onLayout},React.createElement(TouchableWithoutFeedback,{onPress:this.focus},React.createElement(View,{style:{position:'absolute',height:inputHeight,width:width}},React.createElement(AnimatedIcon,{name:iconName,color:iconColor,style:{position:'absolute',backgroundColor:'transparent',top:focusedAnim.interpolate({inputRange:[0,0.2,1],outputRange:[8,iconSize*-1,iconSize*-1]}),left:focusedAnim.interpolate({inputRange:[0,0.2,1],outputRange:[inputPadding,-22,-22]}),height:focusedAnim.interpolate({inputRange:[0,0.2,1],outputRange:[iconSize,inputHeight*2,inputHeight*2]}),fontSize:focusedAnim.interpolate({inputRange:[0,0.2,1],outputRange:[iconSize,iconSize*4,iconSize*4]})}}),React.createElement(Text,{style:[styles.label,labelStyle,{left:iconWidth,top:inputPadding,color:iconColor}]},label))),React.createElement(Animated.View,{style:{position:'absolute',backgroundColor:'white',left:iconWidth,height:inputHeight,width:focusedAnim.interpolate({inputRange:[0,0.2,1],outputRange:[0,0,width]})}}),React.createElement(TextInput,_extends({ref:this.input},this.props,{style:[styles.textInput,inputStyle,{width:width,height:inputHeight,paddingHorizontal:inputPadding}],value:value,onBlur:this._onBlur,onChange:this._onChange,onFocus:this._onFocus,underlineColorAndroid:'transparent'})));}}]);return Makiko;}(BaseInput);Makiko.propTypes={iconClass:PropTypes.func.isRequired,iconName:PropTypes.string.isRequired,iconColor:PropTypes.string,iconSize:PropTypes.number,iconWidth:PropTypes.number,inputPadding:PropTypes.number,height:PropTypes.number};Makiko.defaultProps={iconColor:'white',iconSize:30,iconWidth:60,height:48,inputPadding:16,easing:Easing.bezier(0.7,0,0.3,1),animationDuration:300};export{Makiko as default};var styles=StyleSheet.create({container:{backgroundColor:'#CBCBCB',overflow:'hidden'},label:{position:'absolute',fontSize:16,fontWeight:'bold',color:'white',backgroundColor:'transparent'},textInput:{paddingVertical:0,color:'black',fontSize:18}});","map":{"version":3,"sources":["/Users/alice/Desktop/parata-app/Parata/node_modules/react-native-textinput-effects/lib/Makiko.js"],"names":["React","PropTypes","BaseInput","Makiko","props","iconClass","iconColor","iconName","iconSize","iconWidth","containerStyle","style","inputHeight","height","inputPadding","inputStyle","label","labelStyle","state","width","focusedAnim","value","AnimatedIcon","Animated","createAnimatedComponent","styles","container","_onLayout","focus","position","backgroundColor","top","interpolate","inputRange","outputRange","left","fontSize","color","input","textInput","paddingHorizontal","_onBlur","_onChange","_onFocus","propTypes","func","isRequired","string","number","defaultProps","easing","Easing","bezier","animationDuration","StyleSheet","create","overflow","fontWeight","paddingVertical"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Animated,\n  Easing,\n  Text,\n  TextInput,\n  TouchableWithoutFeedback,\n  View,\n  StyleSheet,\n} from 'react-native';\n\nimport BaseInput from './BaseInput';\n\nexport default class Makiko extends BaseInput {\n  static propTypes = {\n    /*\n     * This is the icon component you are importing from react-native-vector-icons.\n     * import FontAwesomeIcon from 'react-native-vector-icons/FontAwesome';\n     * iconClass={FontAwesomeIcon}\n     */\n    iconClass: PropTypes.func.isRequired,\n\n    /*\n     * Passed to react-native-vector-icons library as name prop.\n     * This icon expands and covers the input.\n     * So, the icon should not have any blank spaces for animation experience.\n     * This is the limitation for Makiko.\n     */\n    iconName: PropTypes.string.isRequired,\n\n    /*\n     * Passed to react-native-vector-icons library as color prop\n     */\n    iconColor: PropTypes.string,\n\n    /*\n     * Use iconSize and iconWidth to make the animation work for your icon\n     */\n    iconSize: PropTypes.number,\n    iconWidth: PropTypes.number,\n\n    inputPadding: PropTypes.number,\n    height: PropTypes.number,\n  };\n\n  static defaultProps = {\n    iconColor: 'white',\n    iconSize: 30,\n    iconWidth: 60,\n    height: 48,\n    inputPadding: 16,\n    easing: Easing.bezier(0.7, 0, 0.3, 1),\n    animationDuration: 300,\n  };\n\n  render() {\n    const {\n      iconClass,\n      iconColor,\n      iconName,\n      iconSize,\n      iconWidth,\n      style: containerStyle,\n      height: inputHeight,\n      inputPadding,\n      inputStyle,\n      label,\n      labelStyle,\n    } = this.props;\n    const {\n      width,\n      focusedAnim,\n      value,\n    } = this.state;\n    const AnimatedIcon = Animated.createAnimatedComponent(iconClass);\n\n    return (\n      <View\n        style={[styles.container, containerStyle]}\n        onLayout={this._onLayout}\n      >\n        <TouchableWithoutFeedback onPress={this.focus}>\n          <View\n            style={{\n              position: 'absolute',\n              height: inputHeight,\n              width,\n            }}\n          >\n            <AnimatedIcon\n              name={iconName}\n              color={iconColor}\n              style={{\n                position: 'absolute',\n                backgroundColor: 'transparent',\n                top: focusedAnim.interpolate({\n                  inputRange: [0, 0.2, 1],\n                  outputRange: [8, iconSize * -1, iconSize * -1],\n                }),\n                left: focusedAnim.interpolate({\n                  inputRange: [0, 0.2, 1],\n                  outputRange: [inputPadding, -22, -22],\n                }),\n                height: focusedAnim.interpolate({\n                  inputRange: [0, 0.2, 1],\n                  outputRange: [iconSize, inputHeight * 2, inputHeight * 2],\n                }),\n                fontSize: focusedAnim.interpolate({\n                  inputRange: [0, 0.2, 1],\n                  outputRange: [iconSize, iconSize * 4, iconSize * 4],\n                }),\n              }}\n            />\n            <Text\n              style={[\n                styles.label,\n                labelStyle,\n                {\n                  left: iconWidth,\n                  top: inputPadding,\n                  color: iconColor,\n                },\n              ]}\n            >\n              {label}\n            </Text>\n          </View>\n        </TouchableWithoutFeedback>\n        <Animated.View\n          style={{\n            position: 'absolute',\n            backgroundColor: 'white',\n            left: iconWidth,\n            height: inputHeight,\n            width: focusedAnim.interpolate({\n              inputRange: [0, 0.2, 1],\n              outputRange: [0, 0, width],\n            }),\n          }}\n        />\n        <TextInput\n          ref={this.input}\n          {...this.props}\n          style={[\n            styles.textInput,\n            inputStyle,\n            {\n              width,\n              height: inputHeight,\n              paddingHorizontal: inputPadding,\n            },\n          ]}\n          value={value}\n          onBlur={this._onBlur}\n          onChange={this._onChange}\n          onFocus={this._onFocus}\n          underlineColorAndroid={'transparent'}\n        />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#CBCBCB',\n    overflow: 'hidden',\n  },\n  label: {\n    position: 'absolute',\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: 'white',\n    backgroundColor: 'transparent',\n  },\n  textInput: {\n    paddingVertical: 0,\n    color: 'black',\n    fontSize: 18,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}