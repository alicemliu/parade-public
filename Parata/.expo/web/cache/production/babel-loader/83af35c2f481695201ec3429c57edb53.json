{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import React from'react';import PropTypes from'prop-types';import Animated from\"react-native-web/dist/exports/Animated\";import Easing from\"react-native-web/dist/exports/Easing\";import Text from\"react-native-web/dist/exports/Text\";import TextInput from\"react-native-web/dist/exports/TextInput\";import TouchableWithoutFeedback from\"react-native-web/dist/exports/TouchableWithoutFeedback\";import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import BaseInput from\"./BaseInput\";var Kohana=function(_BaseInput){_inherits(Kohana,_BaseInput);function Kohana(){_classCallCheck(this,Kohana);return _possibleConstructorReturn(this,_getPrototypeOf(Kohana).apply(this,arguments));}_createClass(Kohana,[{key:\"render\",value:function render(){var _this$props=this.props,Icon=_this$props.iconClass,iconColor=_this$props.iconColor,iconSize=_this$props.iconSize,iconName=_this$props.iconName,label=_this$props.label,containerStyle=_this$props.style,inputPadding=_this$props.inputPadding,inputStyle=_this$props.inputStyle,labelStyle=_this$props.labelStyle,iconContainerStyle=_this$props.iconContainerStyle,labelContainerStyle=_this$props.labelContainerStyle;var _this$state=this.state,focusedAnim=_this$state.focusedAnim,value=_this$state.value;return React.createElement(View,{style:[styles.container,containerStyle],onLayout:this._onLayout},React.createElement(TouchableWithoutFeedback,{onPress:this.focus},React.createElement(Animated.View,{style:_objectSpread({justifyContent:'center',padding:inputPadding,transform:[{translateX:focusedAnim.interpolate({inputRange:[0,1],outputRange:[-15-iconSize,0]})}]},iconContainerStyle)},React.createElement(Icon,{name:iconName,color:iconColor,size:iconSize}))),React.createElement(TouchableWithoutFeedback,{onPress:this.focus},React.createElement(Animated.View,{style:_objectSpread({position:'absolute',top:inputPadding,left:0,transform:[{translateX:focusedAnim.interpolate({inputRange:[0,1],outputRange:[inputPadding,80]})}],opacity:focusedAnim.interpolate({inputRange:[0,1],outputRange:[1,0]})},labelContainerStyle)},React.createElement(Text,{style:[styles.label,labelStyle]},label))),React.createElement(TextInput,_extends({ref:this.input},this.props,{style:[styles.textInput,inputStyle,{paddingHorizontal:inputPadding}],value:value,onBlur:this._onBlur,onFocus:this._onFocus,onChange:this._onChange,underlineColorAndroid:'transparent'})));}}]);return Kohana;}(BaseInput);Kohana.propTypes={iconClass:PropTypes.func.isRequired,iconName:PropTypes.string.isRequired,iconColor:PropTypes.string,iconSize:PropTypes.number,inputPadding:PropTypes.number};Kohana.defaultProps={easing:Easing.bezier(0.2,1,0.3,1),iconSize:25,inputPadding:16,useNativeDriver:false};export{Kohana as default};var styles=StyleSheet.create({container:{flex:1,flexDirection:'row',backgroundColor:'white',overflow:'hidden'},label:{fontSize:18,fontWeight:'bold',color:'#D2D2D2'},textInput:{flex:1,paddingVertical:0,color:'black',fontSize:18}});","map":{"version":3,"sources":["/Users/alice/Desktop/parata-app/Parata/node_modules/react-native-textinput-effects/lib/Kohana.js"],"names":["React","PropTypes","BaseInput","Kohana","props","Icon","iconClass","iconColor","iconSize","iconName","label","containerStyle","style","inputPadding","inputStyle","labelStyle","iconContainerStyle","labelContainerStyle","state","focusedAnim","value","styles","container","_onLayout","focus","justifyContent","padding","transform","translateX","interpolate","inputRange","outputRange","position","top","left","opacity","input","textInput","paddingHorizontal","_onBlur","_onFocus","_onChange","propTypes","func","isRequired","string","number","defaultProps","easing","Easing","bezier","useNativeDriver","StyleSheet","create","flex","flexDirection","backgroundColor","overflow","fontSize","fontWeight","color","paddingVertical"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Animated,\n  Easing,\n  Text,\n  TextInput,\n  TouchableWithoutFeedback,\n  View,\n  StyleSheet,\n} from 'react-native';\n\nimport BaseInput from './BaseInput';\n\nexport default class Kohana extends BaseInput {\n  static propTypes = {\n    /*\n     * This is the icon component you are importing from react-native-vector-icons.\n     * import FontAwesomeIcon from 'react-native-vector-icons/FontAwesome';\n     * iconClass={FontAwesomeIcon}\n     */\n    iconClass: PropTypes.func.isRequired,\n    /*\n     * Passed to react-native-vector-icons library as name prop\n     */\n    iconName: PropTypes.string.isRequired,\n    /*\n     * Passed to react-native-vector-icons library as color prop\n     */\n    iconColor: PropTypes.string,\n    /*\n     * Passed to react-native-vector-icons library as size prop.\n     */\n    iconSize: PropTypes.number,\n\n    inputPadding: PropTypes.number,\n  };\n\n  static defaultProps = {\n    easing: Easing.bezier(0.2, 1, 0.3, 1),\n    iconSize: 25,\n    inputPadding: 16,\n    useNativeDriver: false,\n  };\n\n  render() {\n    const {\n      iconClass: Icon,\n      iconColor,\n      iconSize,\n      iconName,\n      label,\n      style: containerStyle,\n      inputPadding,\n      inputStyle,\n      labelStyle,\n      iconContainerStyle,\n      labelContainerStyle,\n    } = this.props;\n    const { focusedAnim, value } = this.state;\n\n    return (\n      <View\n        style={[styles.container, containerStyle]}\n        onLayout={this._onLayout}\n      >\n        <TouchableWithoutFeedback onPress={this.focus}>\n          <Animated.View\n            style={{\n              justifyContent: 'center',\n              padding: inputPadding,\n              transform: [\n                {\n                  translateX: focusedAnim.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [-15 - iconSize, 0],\n                  }),\n                },\n              ],\n              ...iconContainerStyle,\n            }}\n          >\n            <Icon name={iconName} color={iconColor} size={iconSize} />\n          </Animated.View>\n        </TouchableWithoutFeedback>\n        <TouchableWithoutFeedback onPress={this.focus}>\n          <Animated.View\n            style={{\n              position: 'absolute',\n              top: inputPadding,\n              left: 0,\n              transform: [\n                {\n                  translateX: focusedAnim.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [inputPadding, 80],\n                  }),\n                },\n              ],\n              opacity: focusedAnim.interpolate({\n                inputRange: [0, 1],\n                outputRange: [1, 0],\n              }),\n              ...labelContainerStyle,\n            }}\n          >\n            <Text style={[styles.label, labelStyle]}>\n              {label}\n            </Text>\n          </Animated.View>\n        </TouchableWithoutFeedback>\n        <TextInput\n          ref={this.input}\n          {...this.props}\n          style={[styles.textInput, inputStyle, {\n            paddingHorizontal: inputPadding,\n          }]}\n          value={value}\n          onBlur={this._onBlur}\n          onFocus={this._onFocus}\n          onChange={this._onChange}\n          underlineColorAndroid={'transparent'}\n        />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    backgroundColor: 'white',\n    overflow: 'hidden',\n  },\n  label: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#D2D2D2',\n  },\n  textInput: {\n    flex: 1,\n    paddingVertical: 0,\n    color: 'black',\n    fontSize: 18,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}